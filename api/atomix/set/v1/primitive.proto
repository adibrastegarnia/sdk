/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.set.v1;

import "atomix/atom/v1/descriptor.proto";
import "atomix/atom/meta/v1/headers.proto";
import "atomix/atom/meta/v1/object.proto";
import "gogoproto/gogo.proto";

// Set is a service for a set primitive
service Set {
    option (atomix.atom.v1.primitive_type) = "Set";
    option (atomix.atom.v1.service_type) = SERVER;
    option (atomix.atom.v1.partitioned) = true;

    // Size gets the number of elements in the set
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.atom.v1.operation_id) = 3;
        option (atomix.atom.v1.operation_type) = QUERY;
    }

    // Contains returns whether the set contains a value
    rpc Contains (ContainsRequest) returns (ContainsResponse) {
        option (atomix.atom.v1.operation_id) = 4;
        option (atomix.atom.v1.operation_type) = QUERY;
        option (atomix.atom.v1.partition_strategy) = HASH;
    }

    // Add adds a value to the set
    rpc Add (AddRequest) returns (AddResponse) {
        option (atomix.atom.v1.operation_id) = 5;
        option (atomix.atom.v1.operation_type) = COMMAND;
        option (atomix.atom.v1.partition_strategy) = HASH;
    }

    // Remove removes a value from the set
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.atom.v1.operation_id) = 6;
        option (atomix.atom.v1.operation_type) = COMMAND;
        option (atomix.atom.v1.partition_strategy) = HASH;
    }

    // Clear removes all values from the set
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.atom.v1.operation_id) = 7;
        option (atomix.atom.v1.operation_type) = COMMAND;
    }

    // Events listens for set change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.atom.v1.operation_id) = 8;
        option (atomix.atom.v1.operation_type) = COMMAND;
    }

    // Elements lists all elements in the set
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.atom.v1.operation_id) = 9;
        option (atomix.atom.v1.operation_type) = QUERY;
    }
}

message SizeRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    SizeInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message SizeInput {

}

message SizeResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    SizeOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message SizeOutput {
    uint32 size = 1;
}

message ContainsRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    ContainsInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message ContainsInput {
    Element element = 1 [
        (gogoproto.nullable) = false
    ];
}

message ContainsResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    ContainsOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message ContainsOutput {
    bool contains = 1;
}

message AddRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    AddInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message AddInput {
    Element element = 1 [
        (gogoproto.nullable) = false
    ];
}

message AddResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    AddOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message AddOutput {
    Element element = 1 [
        (gogoproto.nullable) = false
    ];
}

message RemoveRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    RemoveInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message RemoveInput {
    Element element = 2 [
        (gogoproto.nullable) = false
    ];
}

message RemoveResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    RemoveOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message RemoveOutput {
    Element element = 1 [
        (gogoproto.nullable) = false
    ];
}

message ClearRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    ClearInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message ClearInput {

}

message ClearResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    ClearOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message ClearOutput {

}

message EventsRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    EventsInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message EventsInput {
    bool replay = 1;
}

message EventsResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    EventsOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message EventsOutput {
    Event event = 1 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    Type type = 1;
    Element element = 2 [
        (gogoproto.nullable) = false
    ];

    enum Type {
        NONE = 0;
        ADD = 1;
        REMOVE = 2;
        REPLAY = 3;
    }
}

message ElementsRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    ElementsInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message ElementsInput {

}

message ElementsResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    ElementsOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message ElementsOutput {
    Element element = 1 [
        (gogoproto.nullable) = false
    ];
}

message Element {
    atomix.atom.meta.v1.ObjectMeta meta = 1 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false
    ];
    string value = 2 [
        (atomix.atom.v1.partition_key) = true
    ];
}
