/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.counter.v1;

import "atomix/atom/v1/descriptor.proto";
import "atomix/atom/meta/v1/headers.proto";
import "gogoproto/gogo.proto";

// Counter is a service for a counter primitive
service Counter {
    option (atomix.atom.v1.primitive_type) = "Counter";
    option (atomix.atom.v1.service_type) = SERVER;

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.atom.v1.operation_id) = 1;
        option (atomix.atom.v1.operation_type) = COMMAND;
    }

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.atom.v1.operation_id) = 2;
        option (atomix.atom.v1.operation_type) = QUERY;
    }

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse) {
        option (atomix.atom.v1.operation_id) = 3;
        option (atomix.atom.v1.operation_type) = COMMAND;
    }

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse) {
        option (atomix.atom.v1.operation_id) = 4;
        option (atomix.atom.v1.operation_type) = COMMAND;
    }
}

message IncrementRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    IncrementInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message IncrementInput {
    int64 delta = 1;
}

message IncrementResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    IncrementOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message IncrementOutput {
    int64 value = 1;
}

message DecrementRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    DecrementInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message DecrementInput {
    int64 delta = 1;
}

message DecrementResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    DecrementOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message DecrementOutput {
    int64 value = 1;
}

message GetRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    GetInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message GetInput {

}

message GetResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    GetOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message GetOutput {
    int64 value = 1;
}

message Precondition {
    oneof precondition {
        int64 value = 1;
    }
}

message SetRequest {
    atomix.atom.meta.v1.RequestHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    SetInput input = 2 [
        (atomix.atom.v1.input) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message SetInput {
    int64 value = 1;
    repeated Precondition preconditions = 2 [
        (gogoproto.nullable) = false
    ];
}

message SetResponse {
    atomix.atom.meta.v1.ResponseHeaders headers = 1 [
        (atomix.atom.v1.headers) = true,
        (gogoproto.nullable) = false
    ];
    SetOutput output = 2 [
        (atomix.atom.v1.output) = true,
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message SetOutput {
    int64 value = 1;
}

message Value {
    int64 value = 1;
}
