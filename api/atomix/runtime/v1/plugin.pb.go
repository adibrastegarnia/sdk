// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/runtime/v1/plugin.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RuntimeInfo struct {
	Version      string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	BuildVersion string `protobuf:"bytes,2,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
}

func (m *RuntimeInfo) Reset()         { *m = RuntimeInfo{} }
func (m *RuntimeInfo) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfo) ProtoMessage()    {}
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ccb8ae703bdd86c, []int{0}
}
func (m *RuntimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfo.Merge(m, src)
}
func (m *RuntimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfo proto.InternalMessageInfo

func (m *RuntimeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RuntimeInfo) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

type PluginInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PluginInfo) Reset()         { *m = PluginInfo{} }
func (m *PluginInfo) String() string { return proto.CompactTextString(m) }
func (*PluginInfo) ProtoMessage()    {}
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ccb8ae703bdd86c, []int{1}
}
func (m *PluginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginInfo.Merge(m, src)
}
func (m *PluginInfo) XXX_Size() int {
	return m.Size()
}
func (m *PluginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PluginInfo proto.InternalMessageInfo

func (m *PluginInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PullPluginRequest struct {
	Runtime RuntimeInfo `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime"`
	Plugin  PluginInfo  `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin"`
}

func (m *PullPluginRequest) Reset()         { *m = PullPluginRequest{} }
func (m *PullPluginRequest) String() string { return proto.CompactTextString(m) }
func (*PullPluginRequest) ProtoMessage()    {}
func (*PullPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ccb8ae703bdd86c, []int{2}
}
func (m *PullPluginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullPluginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullPluginRequest.Merge(m, src)
}
func (m *PullPluginRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullPluginRequest proto.InternalMessageInfo

func (m *PullPluginRequest) GetRuntime() RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return RuntimeInfo{}
}

func (m *PullPluginRequest) GetPlugin() PluginInfo {
	if m != nil {
		return m.Plugin
	}
	return PluginInfo{}
}

type PullPluginResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PullPluginResponse) Reset()         { *m = PullPluginResponse{} }
func (m *PullPluginResponse) String() string { return proto.CompactTextString(m) }
func (*PullPluginResponse) ProtoMessage()    {}
func (*PullPluginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ccb8ae703bdd86c, []int{3}
}
func (m *PullPluginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullPluginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullPluginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullPluginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullPluginResponse.Merge(m, src)
}
func (m *PullPluginResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullPluginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullPluginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullPluginResponse proto.InternalMessageInfo

func (m *PullPluginResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CompilePluginRequest struct {
	Runtime RuntimeInfo `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime"`
	Plugin  PluginInfo  `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin"`
}

func (m *CompilePluginRequest) Reset()         { *m = CompilePluginRequest{} }
func (m *CompilePluginRequest) String() string { return proto.CompactTextString(m) }
func (*CompilePluginRequest) ProtoMessage()    {}
func (*CompilePluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ccb8ae703bdd86c, []int{4}
}
func (m *CompilePluginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilePluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilePluginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilePluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilePluginRequest.Merge(m, src)
}
func (m *CompilePluginRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompilePluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilePluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompilePluginRequest proto.InternalMessageInfo

func (m *CompilePluginRequest) GetRuntime() RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return RuntimeInfo{}
}

func (m *CompilePluginRequest) GetPlugin() PluginInfo {
	if m != nil {
		return m.Plugin
	}
	return PluginInfo{}
}

type CompilePluginResponse struct {
	Plugin string `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (m *CompilePluginResponse) Reset()         { *m = CompilePluginResponse{} }
func (m *CompilePluginResponse) String() string { return proto.CompactTextString(m) }
func (*CompilePluginResponse) ProtoMessage()    {}
func (*CompilePluginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ccb8ae703bdd86c, []int{5}
}
func (m *CompilePluginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilePluginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilePluginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilePluginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilePluginResponse.Merge(m, src)
}
func (m *CompilePluginResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompilePluginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilePluginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompilePluginResponse proto.InternalMessageInfo

func (m *CompilePluginResponse) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func init() {
	proto.RegisterType((*RuntimeInfo)(nil), "atomix.runtime.v1.RuntimeInfo")
	proto.RegisterType((*PluginInfo)(nil), "atomix.runtime.v1.PluginInfo")
	proto.RegisterType((*PullPluginRequest)(nil), "atomix.runtime.v1.PullPluginRequest")
	proto.RegisterType((*PullPluginResponse)(nil), "atomix.runtime.v1.PullPluginResponse")
	proto.RegisterType((*CompilePluginRequest)(nil), "atomix.runtime.v1.CompilePluginRequest")
	proto.RegisterType((*CompilePluginResponse)(nil), "atomix.runtime.v1.CompilePluginResponse")
}

func init() { proto.RegisterFile("atomix/runtime/v1/plugin.proto", fileDescriptor_4ccb8ae703bdd86c) }

var fileDescriptor_4ccb8ae703bdd86c = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0x6f, 0xc6, 0xd8, 0xf0, 0x6d, 0x13, 0x16, 0xa6, 0x8c, 0x81, 0x51, 0xaa, 0xe2, 0x4e, 0xad,
	0xab, 0x37, 0x05, 0x0f, 0xf3, 0x24, 0x78, 0x18, 0x3d, 0x78, 0xf1, 0x20, 0x1d, 0x8b, 0x25, 0xd0,
	0x36, 0xb5, 0x4d, 0x87, 0x7e, 0x8b, 0x81, 0x5f, 0x6a, 0xc7, 0x1d, 0x3d, 0x89, 0x6c, 0x5f, 0x44,
	0x96, 0xa4, 0xee, 0x8f, 0x85, 0x5d, 0xbd, 0xbd, 0xe4, 0xfd, 0xde, 0xef, 0xcf, 0x0b, 0x01, 0xe2,
	0x09, 0x1e, 0xb2, 0x37, 0x3b, 0xc9, 0x22, 0xc1, 0x42, 0x6a, 0x8f, 0x7b, 0x76, 0x1c, 0x64, 0x3e,
	0x8b, 0xac, 0x38, 0xe1, 0x82, 0xe3, 0xa6, 0xea, 0x5b, 0xba, 0x6f, 0x8d, 0x7b, 0x9d, 0x96, 0xcf,
	0x7d, 0x2e, 0xbb, 0xf6, 0xb2, 0x52, 0x40, 0xf3, 0x01, 0x6a, 0xae, 0xc2, 0xdc, 0x47, 0x2f, 0x1c,
	0xb7, 0xa1, 0x3a, 0xa6, 0x49, 0xca, 0x78, 0xd4, 0x46, 0x27, 0xa8, 0xbb, 0xe7, 0xe6, 0x47, 0x7c,
	0x0a, 0x8d, 0x61, 0xc6, 0x82, 0xd1, 0x73, 0xde, 0x2f, 0xc9, 0x7e, 0x5d, 0x5e, 0x3e, 0xaa, 0x3b,
	0xf3, 0x1a, 0x60, 0x20, 0x6d, 0x48, 0x32, 0x0c, 0xe5, 0xc8, 0x0b, 0xa9, 0x66, 0x92, 0xf5, 0xba,
	0x40, 0x69, 0x43, 0xc0, 0x9c, 0x20, 0x68, 0x0e, 0xb2, 0x20, 0x50, 0x04, 0x2e, 0x7d, 0xcd, 0x68,
	0x2a, 0xf0, 0x2d, 0x54, 0x75, 0x06, 0x49, 0x53, 0x73, 0x88, 0xf5, 0x27, 0x9a, 0xb5, 0x96, 0xa0,
	0x5f, 0x9e, 0x7e, 0x1d, 0x1b, 0x6e, 0x3e, 0x84, 0x6f, 0xa0, 0xa2, 0x16, 0x23, 0xe5, 0x6a, 0xce,
	0x51, 0xc1, 0xf8, 0xca, 0xb2, 0x9e, 0xd6, 0x23, 0x66, 0x17, 0xf0, 0xba, 0xa3, 0x34, 0xe6, 0x51,
	0x4a, 0x97, 0xb1, 0x46, 0x9e, 0xf0, 0xa4, 0x9f, 0xba, 0x2b, 0x6b, 0xf3, 0x03, 0x41, 0xeb, 0x8e,
	0x87, 0x31, 0x0b, 0xe8, 0x3f, 0xf2, 0x6f, 0xc3, 0xc1, 0x96, 0x29, 0x1d, 0xe1, 0xf0, 0x97, 0x55,
	0xbd, 0x8d, 0x3e, 0x39, 0x21, 0xec, 0xe7, 0x48, 0x9f, 0xa5, 0x22, 0x79, 0xc7, 0x4f, 0x00, 0xab,
	0x15, 0xe0, 0xb3, 0x22, 0xf5, 0xed, 0x37, 0xeb, 0x9c, 0xef, 0x40, 0x29, 0x13, 0x97, 0xc8, 0x11,
	0xb9, 0x9c, 0x76, 0x99, 0xe0, 0x21, 0x34, 0x36, 0x1c, 0xe3, 0x8b, 0x02, 0xae, 0xa2, 0x45, 0x77,
	0xba, 0xbb, 0x81, 0x4a, 0xb7, 0xdf, 0x9e, 0xce, 0x09, 0x9a, 0xcd, 0x09, 0xfa, 0x9e, 0x13, 0x34,
	0x59, 0x10, 0x63, 0xb6, 0x20, 0xc6, 0xe7, 0x82, 0x18, 0xc3, 0x8a, 0xfc, 0x13, 0x57, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xb9, 0xdd, 0xe0, 0x5d, 0x5e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PluginRegistryClient is the client API for PluginRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginRegistryClient interface {
	PullPlugin(ctx context.Context, in *PullPluginRequest, opts ...grpc.CallOption) (PluginRegistry_PullPluginClient, error)
}

type pluginRegistryClient struct {
	cc *grpc.ClientConn
}

func NewPluginRegistryClient(cc *grpc.ClientConn) PluginRegistryClient {
	return &pluginRegistryClient{cc}
}

func (c *pluginRegistryClient) PullPlugin(ctx context.Context, in *PullPluginRequest, opts ...grpc.CallOption) (PluginRegistry_PullPluginClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PluginRegistry_serviceDesc.Streams[0], "/atomix.runtime.v1.PluginRegistry/PullPlugin", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginRegistryPullPluginClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PluginRegistry_PullPluginClient interface {
	Recv() (*PullPluginResponse, error)
	grpc.ClientStream
}

type pluginRegistryPullPluginClient struct {
	grpc.ClientStream
}

func (x *pluginRegistryPullPluginClient) Recv() (*PullPluginResponse, error) {
	m := new(PullPluginResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginRegistryServer is the server API for PluginRegistry service.
type PluginRegistryServer interface {
	PullPlugin(*PullPluginRequest, PluginRegistry_PullPluginServer) error
}

// UnimplementedPluginRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedPluginRegistryServer struct {
}

func (*UnimplementedPluginRegistryServer) PullPlugin(req *PullPluginRequest, srv PluginRegistry_PullPluginServer) error {
	return status.Errorf(codes.Unimplemented, "method PullPlugin not implemented")
}

func RegisterPluginRegistryServer(s *grpc.Server, srv PluginRegistryServer) {
	s.RegisterService(&_PluginRegistry_serviceDesc, srv)
}

func _PluginRegistry_PullPlugin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPluginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginRegistryServer).PullPlugin(m, &pluginRegistryPullPluginServer{stream})
}

type PluginRegistry_PullPluginServer interface {
	Send(*PullPluginResponse) error
	grpc.ServerStream
}

type pluginRegistryPullPluginServer struct {
	grpc.ServerStream
}

func (x *pluginRegistryPullPluginServer) Send(m *PullPluginResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PluginRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.runtime.v1.PluginRegistry",
	HandlerType: (*PluginRegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPlugin",
			Handler:       _PluginRegistry_PullPlugin_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "atomix/runtime/v1/plugin.proto",
}

// PluginCompilerClient is the client API for PluginCompiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginCompilerClient interface {
	CompilePlugin(ctx context.Context, in *CompilePluginRequest, opts ...grpc.CallOption) (*CompilePluginResponse, error)
}

type pluginCompilerClient struct {
	cc *grpc.ClientConn
}

func NewPluginCompilerClient(cc *grpc.ClientConn) PluginCompilerClient {
	return &pluginCompilerClient{cc}
}

func (c *pluginCompilerClient) CompilePlugin(ctx context.Context, in *CompilePluginRequest, opts ...grpc.CallOption) (*CompilePluginResponse, error) {
	out := new(CompilePluginResponse)
	err := c.cc.Invoke(ctx, "/atomix.runtime.v1.PluginCompiler/CompilePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginCompilerServer is the server API for PluginCompiler service.
type PluginCompilerServer interface {
	CompilePlugin(context.Context, *CompilePluginRequest) (*CompilePluginResponse, error)
}

// UnimplementedPluginCompilerServer can be embedded to have forward compatible implementations.
type UnimplementedPluginCompilerServer struct {
}

func (*UnimplementedPluginCompilerServer) CompilePlugin(ctx context.Context, req *CompilePluginRequest) (*CompilePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompilePlugin not implemented")
}

func RegisterPluginCompilerServer(s *grpc.Server, srv PluginCompilerServer) {
	s.RegisterService(&_PluginCompiler_serviceDesc, srv)
}

func _PluginCompiler_CompilePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompilePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCompilerServer).CompilePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.runtime.v1.PluginCompiler/CompilePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCompilerServer).CompilePlugin(ctx, req.(*CompilePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PluginCompiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.runtime.v1.PluginCompiler",
	HandlerType: (*PluginCompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompilePlugin",
			Handler:    _PluginCompiler_CompilePlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/runtime/v1/plugin.proto",
}

func (m *RuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuildVersion) > 0 {
		i -= len(m.BuildVersion)
		copy(dAtA[i:], m.BuildVersion)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.BuildVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PluginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullPluginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullPluginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullPluginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Plugin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlugin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Runtime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlugin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PullPluginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullPluginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullPluginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompilePluginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilePluginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilePluginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Plugin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlugin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Runtime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlugin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CompilePluginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilePluginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilePluginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plugin) > 0 {
		i -= len(m.Plugin)
		copy(dAtA[i:], m.Plugin)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Plugin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuntimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.BuildVersion)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *PluginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *PullPluginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Runtime.Size()
	n += 1 + l + sovPlugin(uint64(l))
	l = m.Plugin.Size()
	n += 1 + l + sovPlugin(uint64(l))
	return n
}

func (m *PullPluginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *CompilePluginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Runtime.Size()
	n += 1 + l + sovPlugin(uint64(l))
	l = m.Plugin.Size()
	n += 1 + l + sovPlugin(uint64(l))
	return n
}

func (m *CompilePluginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plugin)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func sovPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlugin(x uint64) (n int) {
	return sovPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullPluginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullPluginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullPluginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Runtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullPluginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullPluginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullPluginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilePluginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilePluginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilePluginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Runtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilePluginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilePluginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilePluginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlugin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlugin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlugin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlugin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlugin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlugin = fmt.Errorf("proto: unexpected end of group")
)
