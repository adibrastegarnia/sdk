// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/atom/v1/descriptor.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceType int32

const (
	ServiceType_SERVER  ServiceType = 0
	ServiceType_MANAGER ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "SERVER",
	1: "MANAGER",
}

var ServiceType_value = map[string]int32{
	"SERVER":  0,
	"MANAGER": 1,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1cacc3f705bb5454, []int{0}
}

// PartitionStrategy is an enum for indicating the strategy used to partition a primitive
type PartitionStrategy int32

const (
	PartitionStrategy_NONE        PartitionStrategy = 0
	PartitionStrategy_HASH        PartitionStrategy = 1
	PartitionStrategy_RANGE       PartitionStrategy = 2
	PartitionStrategy_RANDOM      PartitionStrategy = 3
	PartitionStrategy_ROUND_ROBIN PartitionStrategy = 4
)

var PartitionStrategy_name = map[int32]string{
	0: "NONE",
	1: "HASH",
	2: "RANGE",
	3: "RANDOM",
	4: "ROUND_ROBIN",
}

var PartitionStrategy_value = map[string]int32{
	"NONE":        0,
	"HASH":        1,
	"RANGE":       2,
	"RANDOM":      3,
	"ROUND_ROBIN": 4,
}

func (x PartitionStrategy) String() string {
	return proto.EnumName(PartitionStrategy_name, int32(x))
}

func (PartitionStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1cacc3f705bb5454, []int{1}
}

// OperationType is an enum for specifying the type of operation
type OperationType int32

const (
	OperationType_COMMAND OperationType = 0
	OperationType_QUERY   OperationType = 1
	OperationType_CREATE  OperationType = 2
	OperationType_CLOSE   OperationType = 3
)

var OperationType_name = map[int32]string{
	0: "COMMAND",
	1: "QUERY",
	2: "CREATE",
	3: "CLOSE",
}

var OperationType_value = map[string]int32{
	"COMMAND": 0,
	"QUERY":   1,
	"CREATE":  2,
	"CLOSE":   3,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}

func (OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1cacc3f705bb5454, []int{2}
}

var E_PrimitiveType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50000,
	Name:          "atomix.atom.v1.primitive_type",
	Tag:           "bytes,50000,opt,name=primitive_type",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_ServiceType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*ServiceType)(nil),
	Field:         50001,
	Name:          "atomix.atom.v1.service_type",
	Tag:           "varint,50001,opt,name=service_type,enum=atomix.atom.v1.ServiceType",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_Partitioned = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50002,
	Name:          "atomix.atom.v1.partitioned",
	Tag:           "varint,50002,opt,name=partitioned",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_PartitionStrategy = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*PartitionStrategy)(nil),
	Field:         51000,
	Name:          "atomix.atom.v1.partition_strategy",
	Tag:           "varint,51000,opt,name=partition_strategy,enum=atomix.atom.v1.PartitionStrategy",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_Headers = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52000,
	Name:          "atomix.atom.v1.headers",
	Tag:           "varint,52000,opt,name=headers",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_Input = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52001,
	Name:          "atomix.atom.v1.input",
	Tag:           "varint,52001,opt,name=input",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_Output = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52002,
	Name:          "atomix.atom.v1.output",
	Tag:           "varint,52002,opt,name=output",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_PartitionKey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52003,
	Name:          "atomix.atom.v1.partition_key",
	Tag:           "varint,52003,opt,name=partition_key",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_PartitionRange = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52004,
	Name:          "atomix.atom.v1.partition_range",
	Tag:           "varint,52004,opt,name=partition_range",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_OperationName = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         52000,
	Name:          "atomix.atom.v1.operation_name",
	Tag:           "bytes,52000,opt,name=operation_name",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_OperationType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*OperationType)(nil),
	Field:         52001,
	Name:          "atomix.atom.v1.operation_type",
	Tag:           "varint,52001,opt,name=operation_type,enum=atomix.atom.v1.OperationType",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_OperationAsync = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52002,
	Name:          "atomix.atom.v1.operation_async",
	Tag:           "varint,52002,opt,name=operation_async",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

var E_OperationId = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         52003,
	Name:          "atomix.atom.v1.operation_id",
	Tag:           "varint,52003,opt,name=operation_id",
	Filename:      "atomix/atom/v1/descriptor.proto",
}

func init() {
	proto.RegisterEnum("atomix.atom.v1.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("atomix.atom.v1.PartitionStrategy", PartitionStrategy_name, PartitionStrategy_value)
	proto.RegisterEnum("atomix.atom.v1.OperationType", OperationType_name, OperationType_value)
	proto.RegisterExtension(E_PrimitiveType)
	proto.RegisterExtension(E_ServiceType)
	proto.RegisterExtension(E_Partitioned)
	proto.RegisterExtension(E_PartitionStrategy)
	proto.RegisterExtension(E_Headers)
	proto.RegisterExtension(E_Input)
	proto.RegisterExtension(E_Output)
	proto.RegisterExtension(E_PartitionKey)
	proto.RegisterExtension(E_PartitionRange)
	proto.RegisterExtension(E_OperationName)
	proto.RegisterExtension(E_OperationType)
	proto.RegisterExtension(E_OperationAsync)
	proto.RegisterExtension(E_OperationId)
}

func init() { proto.RegisterFile("atomix/atom/v1/descriptor.proto", fileDescriptor_1cacc3f705bb5454) }

var fileDescriptor_1cacc3f705bb5454 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xbd, 0x6e, 0xda, 0x50,
	0x14, 0xc7, 0xed, 0x26, 0x81, 0x70, 0x0c, 0xc6, 0xf1, 0x14, 0xb5, 0x8a, 0x93, 0x2e, 0x55, 0xc5,
	0x60, 0x94, 0x54, 0x55, 0xd5, 0x3b, 0x54, 0x72, 0xc0, 0x05, 0xd4, 0x62, 0xb7, 0x97, 0xa4, 0x52,
	0x27, 0xe4, 0xe0, 0x1b, 0x62, 0x35, 0x60, 0xcb, 0xbe, 0xa0, 0xf2, 0x02, 0x1d, 0xab, 0x4e, 0x9d,
	0xfb, 0xf5, 0x10, 0x7d, 0x84, 0x8e, 0xb4, 0x53, 0xc7, 0x0a, 0x5e, 0xa4, 0xba, 0xfe, 0x24, 0x30,
	0x38, 0x93, 0x31, 0x9c, 0xdf, 0xef, 0x7f, 0xee, 0x39, 0x17, 0x38, 0xb4, 0xa8, 0x3b, 0x72, 0xde,
	0xd7, 0xd9, 0xa3, 0x3e, 0x3d, 0xae, 0xdb, 0x24, 0x18, 0xf8, 0x8e, 0x47, 0x5d, 0x5f, 0xf5, 0x7c,
	0x97, 0xba, 0xb2, 0x18, 0x15, 0xa8, 0xec, 0xa1, 0x4e, 0x8f, 0xef, 0x1e, 0x0d, 0x5d, 0x77, 0x78,
	0x4d, 0xea, 0xe1, 0xaf, 0x17, 0x93, 0xcb, 0x0d, 0xa2, 0xf6, 0x00, 0x84, 0x1e, 0xf1, 0xa7, 0xce,
	0x80, 0x9c, 0xcd, 0x3c, 0x22, 0x03, 0x14, 0x7a, 0x3a, 0x7e, 0xa3, 0x63, 0x89, 0x93, 0x05, 0x28,
	0x76, 0x35, 0x43, 0x6b, 0xe9, 0x58, 0xe2, 0x6b, 0x26, 0xec, 0xbd, 0xb2, 0x7c, 0xea, 0x50, 0xc7,
	0x1d, 0xf7, 0xa8, 0x6f, 0x51, 0x32, 0x9c, 0xc9, 0xbb, 0xb0, 0x6d, 0x98, 0x86, 0x2e, 0x71, 0xec,
	0x53, 0x5b, 0xeb, 0xb5, 0x25, 0x5e, 0x2e, 0xc1, 0x0e, 0xd6, 0x8c, 0x96, 0x2e, 0xdd, 0x61, 0x32,
	0xac, 0x19, 0x4d, 0xb3, 0x2b, 0x6d, 0xc9, 0x55, 0x10, 0xb0, 0x79, 0x6e, 0x34, 0xfb, 0xd8, 0x3c,
	0xed, 0x18, 0xd2, 0x76, 0xed, 0x19, 0x54, 0x4c, 0x8f, 0xf8, 0x16, 0x13, 0x86, 0xd1, 0x02, 0x14,
	0x1b, 0x66, 0xb7, 0xab, 0x19, 0x4d, 0x89, 0x63, 0x96, 0xd7, 0xe7, 0x3a, 0x7e, 0x2b, 0xf1, 0xcc,
	0xd2, 0xc0, 0xba, 0x76, 0xc6, 0x8c, 0x25, 0xd8, 0x69, 0xbc, 0x34, 0x7b, 0xba, 0xb4, 0x85, 0xda,
	0x20, 0x7a, 0xbe, 0x33, 0x72, 0xa8, 0x33, 0x25, 0x7d, 0xca, 0x04, 0x87, 0x6a, 0x74, 0x5a, 0x35,
	0x39, 0xad, 0x1a, 0x9f, 0xcc, 0xf4, 0x58, 0x48, 0xb0, 0x3f, 0xff, 0xb0, 0x75, 0xc4, 0x3f, 0x2c,
	0xe1, 0x4a, 0x0a, 0xb2, 0x60, 0x64, 0x41, 0x39, 0x88, 0x0a, 0x6f, 0xe9, 0xf9, 0x1d, 0x7a, 0xc4,
	0x93, 0x7b, 0xea, 0xcd, 0x71, 0xab, 0x2b, 0x93, 0xc4, 0x42, 0x90, 0xbd, 0xa0, 0x06, 0x08, 0x5e,
	0x32, 0x3d, 0x62, 0xe7, 0x27, 0xfc, 0x09, 0x13, 0x76, 0xf1, 0x2a, 0x85, 0x7c, 0x90, 0xd3, 0xd7,
	0x7e, 0x90, 0xec, 0x40, 0xd9, 0x70, 0x75, 0x09, 0xbd, 0x72, 0xed, 0x44, 0xf5, 0xf3, 0x63, 0xd4,
	0xec, 0xfd, 0xf5, 0x66, 0x37, 0xd6, 0x89, 0xf7, 0xbc, 0xf5, 0xaf, 0xd0, 0x53, 0x28, 0x5e, 0x11,
	0xcb, 0x26, 0x7e, 0x20, 0x1f, 0x6c, 0x04, 0x3d, 0x77, 0xc8, 0x75, 0x9a, 0xf3, 0xe5, 0x73, 0xd4,
	0x72, 0x52, 0x8f, 0x1e, 0xc3, 0x8e, 0x33, 0xf6, 0x26, 0x34, 0x0f, 0xfc, 0x1a, 0x83, 0x51, 0x35,
	0x7a, 0x02, 0x05, 0x77, 0x42, 0x6f, 0xc1, 0x7d, 0x8b, 0xb9, 0xb8, 0x1c, 0x35, 0xa1, 0x92, 0x8d,
	0xe7, 0x1d, 0x99, 0xe5, 0xf1, 0xdf, 0x63, 0xbe, 0x9c, 0x52, 0x2f, 0xc8, 0x0c, 0xb5, 0xa1, 0x9a,
	0x59, 0x7c, 0x6b, 0x3c, 0x24, 0x79, 0x9e, 0x1f, 0xb1, 0x47, 0x4c, 0x39, 0xcc, 0x30, 0xd4, 0x02,
	0xd1, 0x4d, 0x2e, 0x78, 0x7f, 0x6c, 0x8d, 0x48, 0xee, 0xaa, 0xa2, 0x11, 0x96, 0x70, 0x25, 0xe5,
	0x0c, 0x6b, 0x44, 0xd0, 0xe5, 0xaa, 0x28, 0xbc, 0xa1, 0x79, 0xa2, 0x68, 0xa4, 0xe2, 0xc9, 0xc1,
	0xfa, 0xce, 0x6f, 0xfc, 0xe3, 0x56, 0x72, 0xc2, 0x4b, 0xda, 0x81, 0x6a, 0x96, 0x63, 0x05, 0xb3,
	0xf1, 0x20, 0x37, 0x28, 0xd9, 0x41, 0xd6, 0xa0, 0xc6, 0x38, 0xd4, 0x80, 0x72, 0xa6, 0x72, 0xec,
	0x5c, 0x4f, 0xb4, 0x8b, 0x0a, 0x16, 0x52, 0xaa, 0x63, 0x9f, 0xee, 0xff, 0x5a, 0x28, 0xfc, 0x7c,
	0xa1, 0xf0, 0xff, 0x16, 0x0a, 0xff, 0x69, 0xa9, 0x70, 0xf3, 0xa5, 0xc2, 0xfd, 0x5d, 0x2a, 0xdc,
	0x45, 0x21, 0xd4, 0x3c, 0xfa, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x31, 0xb9, 0xbf, 0x10, 0x05,
	0x00, 0x00,
}
